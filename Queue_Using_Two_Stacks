class QueueUsingTwoStacks:
    def __init__(self):
        self.stack_in = []  # Stack for enqueue operations
        self.stack_out = []  # Stack for dequeue and front operations

    def enqueue(self, x):
        self.stack_in.append(x)

    def dequeue(self):
        self._transfer_if_needed()
        if self.stack_out:
            self.stack_out.pop()

    def front(self):
        self._transfer_if_needed()
        if self.stack_out:
            return self.stack_out[-1]

    def _transfer_if_needed(self):
        # Transfer elements from stack_in to stack_out if stack_out is empty
        if not self.stack_out:
            while self.stack_in:
                self.stack_out.append(self.stack_in.pop())


if __name__ == "__main__":
    q = int(input().strip())
    queue = QueueUsingTwoStacks()

    for _ in range(q):
        query = input().strip().split()
        query_type = int(query[0])

        if query_type == 1:  # Enqueue
            x = int(query[1])
            queue.enqueue(x)
        elif query_type == 2:  # Dequeue
            queue.dequeue()
        elif query_type == 3:  # Print front
            print(queue.front())
